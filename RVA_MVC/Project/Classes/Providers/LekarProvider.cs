///////////////////////////////////////////////////////////
//  LekarProvider.cs
//  Implementation of the Class LekarProvider
//  Generated by Enterprise Architect
//  Created on:      29-Aug-2022 18:54:29
//  Original author: Luka
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Classes;
using System.Data;
using Dapper;
using MySql.Data.MySqlClient;

namespace Classes {
	public class LekarProvider : ILekarProvider {

		public LekarProvider(){

		}

		~LekarProvider(){

		}

		/// 
		/// <param name="id"></param>
		public Lekar Dobavi(int id){
			using (IDbConnection c = new MySqlConnection(ConnectionString.Read()))
			{
				var dto = c.QueryFirst<LekarDTO>("select * from (lekar inner join korisnik on lekar.id = korisnik.id) where lekar.id = @Id", new { Id = id });
				IBolnicaProvider bolnicaProvider = new BolnicaProvider();
				dto.Bolnica = bolnicaProvider.BolnicaSaID(dto.BolnicaId);
				return dto.GetLekar();
			}
		}

		/// 
		/// <param name="obj"></param>
		public void Dodaj(Lekar obj){
			using (IDbConnection c = new MySqlConnection(ConnectionString.Read()))
			{
				var list = c.Query<Korisnik>("select * from korisnik").AsList();
				if(list.Find(t => t.KorisnickoIme == obj.KorisnickoIme) != null)
					return;
				c.Execute($"insert into korisnik (ime, prezime, korisnickoIme, lozinka, tip) values (@Ime, @Prezime, @KorisnickoIme, @Lozinka, '{Enum.GetName(typeof(Tip), obj.Tip)}')", obj);
                switch (obj.Specijalizacija)
                {
                    case Specijalizacija.Hirurg:
						obj.Odeljenje = Odeljenje.Hirurgija;
						break;
                    case Specijalizacija.OpstaMedicina:
						obj.Odeljenje = Odeljenje.Opsta;
						break;
                    case Specijalizacija.Pedijatar:
						obj.Odeljenje = Odeljenje.Pedijatrija;
						break;
                    case Specijalizacija.Ortoped:
						obj.Odeljenje = Odeljenje.Ortopedija;
						break;
                    default:
                        break;
                }
                obj.Id = c.QueryFirst<int>("select id from korisnik where korisnickoIme = @KorisnickoIme", obj);
				c.Execute($"insert into lekar (id, titula, odeljenje, specijalizacija, bolnicaId) values (@Id, '{Enum.GetName(typeof(Titula), obj.Titula)}', '{Enum.GetName(typeof(Odeljenje), obj.Odeljenje)}', '{Enum.GetName(typeof(Specijalizacija), obj.Specijalizacija)}', {obj.m_Bolnica.Id})", obj);
				c.Execute($"insert into LekarBolnica (lekarId, bolnicaId) values ({obj.Id}, {obj.m_Bolnica.Id})");
				c.Execute($"update bolnica set brojLekara = (select count(*) from LekarBolnica where bolnicaId = id) where id = {obj.m_Bolnica.Id}");
			}
		}

		/// 
		/// <param name="id"></param>
		/// <param name="obj"></param>
		public void Izmena(int id, Lekar obj){
			IKorisnikProvider korisnikProvider = KorisnikStrategy.GetStrategy();
			korisnikProvider.IzmeniKorisnika(id, obj);
		}

		/// 
		/// <param name="id"></param>
		public void Obrisi(int id){
			using (IDbConnection c = new MySqlConnection(ConnectionString.Read()))
			{
				c.Execute("delete from LekarBolnica where lekarId = @Id", new { Id = id });
				c.Execute("update pacijent set lekarId = -1 where lekarId = @Id", new { Id = id });
				c.Execute("delete from lekar where id = @Id", new { Id = id });
				c.Execute("delete from korisnik where id = @Id", new { Id = id });
			}
		}

		public List<Lekar> Svi(){
			using (IDbConnection c = new MySqlConnection(ConnectionString.Read()))
			{
				var dto = c.Query<LekarDTO>("select * from (lekar inner join korisnik on lekar.id = korisnik.id)").AsList();
				IBolnicaProvider bolnicaProvider = new BolnicaProvider();
				var lekari = new List<Lekar>();
				for (int i = 0; i < dto.Count; i++)
                {
					dto[i].Bolnica = bolnicaProvider.BolnicaSaID(dto[i].BolnicaId);
					lekari.Add(dto[i].GetLekar());
                }
				
				return lekari;
			}
		}

	}//end LekarProvider

}//end namespace Classes